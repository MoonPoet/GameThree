--------------------------- code copy paste ---------------------------------------
para items los cast
para vidas heal

armas
https://mrbubblewand.wordpress.com/2010/12/30/animation-light_004/ yo
https://mrbubblewand.wordpress.com/2010/04/11/animation-light_003/ enemigo
https://mrbubblewand.wordpress.com/2010/01/29/animation-wind_002/
https://mrbubblewand.wordpress.com/2010/01/28/animation-magic_005/
https://mrbubblewand.wordpress.com/2010/01/18/animation-magic_004/
https://mrbubblewand.wordpress.com/2009/10/05/animation-fire_002/
https://mrbubblewand.wordpress.com/2009/09/13/animation-magic_003/
https://mrbubblewand.wordpress.com/2009/06/09/animation-effect_001/
https://mrbubblewand.wordpress.com/2009/06/07/animation-magic_02/
https://mrbubblewand.wordpress.com/2009/06/05/animations-thunder_01-heal_01-2/

candidatos a poderes del malo:
effect_001 tiene fondo negro
wind_003 queda bien
thunder_003 queda hermoso pero es cuadrado :(
heal_003 no queda muy lindo, no se destaca.
magic_008 no queda muy lindo, no se destaca.

posibles audios ante la perdida de poder
https://freesound.org/people/Streetpoptunez/sounds/413074/
https://freesound.org/people/KauaiBoyRK/sounds/59545/
https://freesound.org/people/OwlStorm/sounds/404767/
https://freesound.org/people/suntemple/sounds/253173/
https://freesound.org/people/Callum_Sharp279/sounds/200469/
https://freesound.org/people/Veiler/sounds/264462/ (bump)

posibles poderes
https://mrbubblewand.files.wordpress.com/2009/08/special_002.png
https://mrbubblewand.files.wordpress.com/2010/02/magic_006.png
https://mrbubblewand.files.wordpress.com/2010/01/magic_005.png
https://mrbubblewand.files.wordpress.com/2010/01/magic_004.png
https://mrbubblewand.files.wordpress.com/2009/09/magic_003.png
https://mrbubblewand.files.wordpress.com/2009/08/magic_002.png (fondo negro)
https://mrbubblewand.files.wordpress.com/2009/08/heal_001.png
https://mrbubblewand.files.wordpress.com/2009/08/darkness_001.png

posibles efectos para escudos
escudo
https://mrbubblewand.files.wordpress.com/2010/06/fire_003.png si
https://mrbubblewand.files.wordpress.com/2009/10/water_003.png puede ser
https://mrbubblewand.files.wordpress.com/2010/05/earth_002.png no
https://mrbubblewand.files.wordpress.com/2010/01/magic_004.png
https://mrbubblewand.files.wordpress.com/2010/02/magic_006.png puede ser

-----------------------------------------------------------------------------------
Para ir a pelear directo con el enemigo final poner en playscreen (descomentar lo comentado):

       // Allows for debug lines of our box2d world.
        if (DEBUG_MODE) {
            b2dr = new Box2DDebugRenderer();
        }

//        final float ALTURA = 40.0f; // todo
//        gameCam.position.set(gameViewPort.getWorldWidth() / 2, ALTURA, 0); // todo

        creator = new B2WorldCreator(this);

        // Create the hero in our game world
        player = new Hero(this, gameCam.position.x, gameCam.position.y / 2);
//        player.getB2body().setTransform(this.getGameCam().position.x, this.getGameCam().position.y - this.getGameViewPort().getWorldHeight() / 4, player.getB2body().getAngle()); //todo

02-02 18:00:30.905 8532-8600/uy.com.agm.gamethree D/uy.com.agm.gamethree.sprites.finals.FinalEnemyLevelOne: UPPER Y POS 79.98127 79.40.6

-----------------------------------------------------------------------------------

MOVIMIENTOS COMPLEJOS:

1)
    Para hacer ochos y eso.

    private Vector2 getNewTangentialSpeed(float dt) {
        elapsedTime += dt;

        if (elapsedTime >= period) {
            elapsedTime = 0;
            counterclockwise = !counterclockwise;
        }


        float w = 2 * MathUtils.PI / period;
        tmp.set((!counterclockwise ? -1 : 1) * radius * w * MathUtils.sin(w * elapsedTime), (!counterclockwise ? -1 : 1)*radius * w * MathUtils.cos(w * elapsedTime));
        Gdx.app.debug(TAG, "****" + tmp.x + " " + tmp.y + " ELAPSED_TIME " + elapsedTime);
        return tmp;
    }

2)
    elapsedTime += dt;
	float w = 2 * MathUtils.PI / PERIOD_SECONDS;

	float t = elapsedTime;


	curva sin derivar:
	2 sin (w t), 2 cos (w t/2)

	Es como una especie de 8 medio chato. No tiene gran gracia.

	derivada
	2wcos(wt), -2wsin(wt/2)/2

    private float sin(float x) {
        return MathUtils.sin(x);
    }
    private float cos(float x) {
        return MathUtils.cos(x);
    }
-----------------------------------------------------------------------------------

	otra mas linda:
	x = 3 cos(2wt)cos(wt)
	y = 3 cos(2wt)sin(wt)

	derivada:
	-3w(2cos(wt)sin(2wt)+sin(wt)cos(2wt))
	-3w(2sin(wt)sin(2wt)-cos(wt)cos(2wt))

	es una florcita de 4 petalos.

        elapsedTime += dt;
        float w = 2 * MathUtils.PI / PERIOD_SECONDS;

        float t = elapsedTime;
        float x = -3*w*(2*cos(w*t)*sin(2*w*t)+sin(w*t)*cos(2*w*t));
        float y = -3*w*(2*sin(w*t)*sin(2*w*t)-cos(w*t)*cos(2*w*t));
        tmp.set(x, y);
        return tmp;
-----------------------------------------------------------------------------------

	es el movimiento ese en forma de cometa pero no logro controlar su velocidad lineal

        // parametrica: t**3-3.2t+2, 2t**2
        elapsedTime += dt/5;
        float max = 2.497f;
        float min = -2.497f;
        float t = (max - min) * elapsedTime + min;
        float x = (3*t*t - 3.0f) * (counterclockwise ? -1:1);
        float y = 4 * t;
        tmp.set(x, y);

        Gdx.app.debug(TAG, "LEN " + tmp.len());
        if (tmp.len() > 5) {
            tmp.nor().scl(5);
        }

        return tmp;

        pero me niego...no lo voy a hacer asi...lo voy a hacer componiendo y listo porque no tengo control.

-----------------------------------------------------------------------------------

    Con esta formula hago que el enemigo se mueva como el enemigo 4, yendo hacia la izquierda:
    tmp.set(-1, radius * w * MathUtils.cos(w * elapsedTime));

-----------------------------------------------------------------------------------
shake camera when shooting

NUEVA CLASE:

package uy.com.agm.gamethree.tools;

import com.badlogic.gdx.graphics.Camera;
import com.badlogic.gdx.math.Vector2;
import java.util.Random;

/**
 * Created by AGM on 3/27/2018.
 */

public class Shake {
    float[] samples;
    Random rand = new Random();
    float internalTimer = 0;
    float shakeDuration = 0;

    int duration = 1; // In seconds, make longer if you want more variation
    int frequency = 35; // hertz
    float amplitude = 0.2f; // how much you want to shake
    boolean falloff = true; // if the shake should decay as it expires

    int sampleCount;

    public Shake(){
        sampleCount = duration * frequency;
        samples = new float[sampleCount];
        for (int i =0; i < sampleCount; i++){
            samples[i] = rand.nextFloat() * 2f - 1f;
        }
    }

    /**
     * Called every frame will shake the camera if it has a shake duration
     * @param dt Gdx.graphics.getDeltaTime() or your dt in seconds
     * @param camera your camera
     * @param center Where the camera should stay centered on
     */
    public void update(float dt, Camera camera, Vector2 center){
        internalTimer += dt;
        if (internalTimer > duration) internalTimer -= duration;
        if (shakeDuration > 0){
            shakeDuration -= dt;
            float shakeTime = (internalTimer * frequency);
            int first = (int)shakeTime;
            int second = (first + 1)%sampleCount;
            int third = (first + 2)%sampleCount;
            float deltaT = shakeTime - (int)shakeTime;
            float deltaX = samples[first] * deltaT + samples[second] * ( 1f - deltaT);
            float deltaY = samples[second] * deltaT + samples[third] * ( 1f - deltaT);

            camera.position.x = center.x + deltaX * amplitude * (falloff ? Math.min(shakeDuration, 1f) : 1f);
            camera.position.y = center.y + deltaY * amplitude * (falloff ? Math.min(shakeDuration, 1f) : 1f);
        } else {
            camera.position.x = center.x;
            camera.position.y = center.y;
        }
        camera.update();
    }

    /**
     * Will make the camera shake for the duration passed in in seconds
     * @param d duration of the shake in seconds
     */
    public void shake(float d){
        shakeDuration = d;
    }
}

EN PLAYSCREEN:

private Shake shake;

Constructor:

    shake = new Shake();

    private void updateCamera(float dt) {
        // If Hero is dead, we freeze the camera
        if(!player.isHeroDead()) {
            if (isTheEndOfTheWorld()) {
                stopEdges();
            }
        } else {
            stopEdges();
        }

        // ACA PUSE 2.4 FUEGO, CAMBIAR
        shake.update(dt, gameCam, new Vector2(2.4f, upperEdge.getB2body().getPosition().y + Edge.HEIGHT_METERS / 2 - gameViewPort.getWorldHeight() / 2));

        // Tell our renderer to draw only what our camera can see in our game world.
        renderer.setView(gameCam);
    }

    public Shake getShake() {
        return shake;
    }

EN HERO:
    public void openFire() {
        screen.getShake().shake(1);
        if (isShootingEnabled()) {
            shootContext.shoot(b2body.getPosition().x, b2body.getPosition().y);
        }
    }

Once the shake is completed, you then have to ensure you return to the original screen position,
or your camera will be out of sync and things wonâ€™t look right anymore.
I ended up saving the original position of the camera in a baseX and baseY variables and then when the
shaking was completed, you simply assign them back to the camera and update it.

IGUAL SEGUN DICE POR AHI, HACER ESTO PROVOCA UN JUMP NOTORIO CUANDO FINALIZA EL SHAKE (https://www.netprogs.com/libgdx-screen-shaking/)